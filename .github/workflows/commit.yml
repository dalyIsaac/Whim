name: commit

on:
  workflow_dispatch: # Allow running on-demand
  push:
    branches: [main]
    paths:
      - ".github/workflows/commit.yml"
      - "src/**"
      - "scripts/**"
      - "**.py"
      - "whim-installer.iss"
      - "Whim.sln"
      - "Directory.Packages.props"
      - ".csharpierrc"
      - ".xamlstylerrc"
      - ".ruff.toml"
      - ".config/dotnet-tools.json"
  pull_request:
    paths:
      - ".github/workflows/commit.yml"
      - "src/**"
      - "scripts/**"
      - "**.py"
      - "whim-installer.iss"
      - "Whim.sln"
      - "Directory.Packages.props"
      - ".csharpierrc"
      - ".xamlstylerrc"
      - ".ruff.toml"
      - ".config/dotnet-tools.json"

env:
  # We install the packages to the D:\ drive to avoid the slow IO on the C:\ drive.
  # Based on https://github.com/actions/setup-dotnet/issues/260#issuecomment-1790162905
  NUGET_PACKAGES: D:\a\.nuget\packages

jobs:
  commit:
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x64, arm64]

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ matrix.platform }}-nuget-${{ hashFiles('Directory.Packages.props') }}
          restore-keys: |
            ${{ matrix.platform }}-nuget-${{ hashFiles('Directory.Packages.props') }}
            ${{ matrix.platform }}-nuget-

      - name: Restore dependencies
        run: |
          dotnet restore Whim.sln -p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Install dotnet tools
        run: |
          dotnet tool restore

      - name: Check C# formatting
        run: |
          dotnet tool run csharpier check .

      - name: Check XAML formatting
        run: |
          dotnet tool run xstyler --recursive --d . --passive --config ./.xamlstylerrc

      #   - name: Check analyzers
      #     run: |
      #       dotnet format analyzers Whim.sln --verify-no-changes --no-restore

      - name: Check Python formatting
        uses: astral-sh/ruff-action@v3
        with:
          args: format --check

      - name: Lint Python code
        uses: astral-sh/ruff-action@v3
        with:
          args: check

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2.0.0

      - name: Build
        run: |
          msbuild Whim.sln `
            -p:Configuration=$env:Configuration `
            -p:Platform=$env:Platform `
            -p:BuildInParallel=true `
            -maxCpuCount
        env:
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}

      - name: Test
        run: |
          dotnet test Whim.sln --collect:"XPlat Code Coverage;Format=opencover" --logger:junit
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.4.3

      - name: Prepare test file list for Codecov
        id: prep_test_files
        shell: pwsh
        run: |
          $regex = '(?:^|[\\\\/])TestResults(?:[\\\\/]|$)'; # Matches TestResults as a whole directory name
          $matchingFiles = Get-ChildItem -Path . -Recurse -File -Filter "*.xml" -ErrorAction SilentlyContinue | Where-Object {
              $_.DirectoryName -match $regex
          }

          if ($matchingFiles) {
            $filePathsForJoining = $matchingFiles | ForEach-Object { $_.FullName.Replace('\\', '/') }
            $commaSeparatedFiles = $filePathsForJoining -join ','
            Write-Host "Found test files for Codecov: $commaSeparatedFiles"
          } else {
            $commaSeparatedFiles = ''
            Write-Host "No test files found matching '**/TestResults/**/*.xml' for Codecov."
          }
          echo "test_files=$commaSeparatedFiles" >> $env:GITHUB_OUTPUT

      - name: Upload test results to Codecov
        if: ${{ always() }}
        uses: codecov/test-results-action@v1
        with:
          files: ${{ steps.prep_test_files.outputs.test_files }}
