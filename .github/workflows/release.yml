name: release

on:
  push:
    branches:
      - main
      - release/v*
    tags:
      - v*
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/*"
      - ".github/workflows/pull_request_labels.yml"
      - ".github/pull_request_template.md"

jobs:
  create-release:
    runs-on: ubuntu-latest
    concurrency: ci-create-release-${{ github.ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create the release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $channel, $isPrerelease = .\scripts\Get-Channel.ps1
          $currentRelease = .\scripts\Get-CurrentWhimRelease.ps1 -Channel $channel
          $currentRelease = "v${currentRelease}"

          $nextRelease = .\scripts\Get-NextWhimRelease.ps1 -Channel $channel
          $nextRelease = "v${nextRelease}"

          $resp = gh api repos/$env:GITHUB_REPOSITORY/releases/generate-notes `
            -H "Accept: application/vnd.github.v3+json" `
            -f tag_name=$nextRelease `
            -f previous_tag_name=$currentRelease `
            | ConvertFrom-Json

          $notes = $resp.body ?? "Initial release"

          gh release create "$nextRelease" `
            --title "$nextRelease" `
            --prerelease="$isPrerelease" `
            --notes $notes

  release:
    runs-on: windows-latest
    concurrency: ci-${{ github.ref }}
    needs:
      - create-release

    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get variables
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $channel, $isPrerelease = .\scripts\Get-Channel.ps1
          $currentRelease = .\scripts\Get-CurrentWhimRelease.ps1 -Channel $channel
          $version = "v${currentRelease}"

          "CurrentRelease=${currentRelease}" >> $env:GITHUB_ENV
          "Version=${version}" >> $env:GITHUB_ENV

      - name: Restore dependencies
        run: |
          dotnet restore Whim.sln -p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Build
        run: |
          msbuild Whim.sln `
            -p:Configuration=$env:Configuration `
            -p:Platform=$env:Platform `
            -p:Version=$env:CurrentRelease
            -maxCpuCount
        env:
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}

      - name: Build release
        shell: pwsh
        env:
          Platform: ${{ matrix.platform }}
        run: |
          $installerPath = .\scripts\Create-Installer.ps1 -Architecture $env:Platform
          "InstallerPath=${installerPath}" >> $env:GITHUB_ENV

      - name: Upload release assets
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${env:Version}" "${env:InstallerPath}"
