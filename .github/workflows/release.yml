name: release

on:
  push:
    branches:
      - main
      - release/v*
    tags:
      - v*
    paths:
      - ".github/workflows/release.yml"
      - "src/**"
      - "scripts/**"
      - "whim-installer.iss"
      - "Whim.sln"
      - "Directory.Packages.props"
      - "global.json"

jobs:
  check-skip-label:
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.check-labels.outputs.should-skip }}
    steps:
      - name: Check for skip-release label
        id: check-labels
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get commit SHA
          $commitSha = "${{ github.sha }}"

          # Check if this commit is part of a PR
          Write-Host "Checking if commit $commitSha is part of a PR in $env:GITHUB_REPOSITORY"

          $repoName = "$env:GITHUB_REPOSITORY"
          $query = "repo:$repoName sha:$commitSha is:pr"

          Write-Host "Running query: $query"
          $prs = gh api -X GET search/issues -f q="$query" --jq '.items[] | {number: .number, labels: [.labels[].name]}'
          Write-Host "PRs found: $prs"

          # Initialize skip flag
          $shouldSkip = $false

          if ($prs) {
            $prsArray = $prs | ConvertFrom-Json
            foreach ($pr in $prsArray) {
              if ($pr.labels -contains "skip-release") {
                Write-Host "Found PR #$($pr.number) with skip-release label"
                $shouldSkip = $true
                break
              }
            }
          }

          "should-skip=$shouldSkip" >> $env:GITHUB_OUTPUT
          Write-Host "Should skip: $shouldSkip"

  create-release:
    needs: check-skip-label
    if: ${{ needs.check-skip-label.outputs.should-skip != 'true' }}
    runs-on: ubuntu-latest
    concurrency: ci-create-release-${{ github.ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create the next release
        id: create-release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $channel, $isPrerelease = .\scripts\Get-Channel.ps1
          $currentRelease = .\scripts\Get-CurrentWhimRelease.ps1 -Channel $channel
          $currentRelease = "v${currentRelease}"

          $nextRelease = .\scripts\Get-NextWhimRelease.ps1 -Channel $channel
          $ghNextRelease = "v${nextRelease}"

          $resp = gh api repos/$env:GITHUB_REPOSITORY/releases/generate-notes `
            -H "Accept: application/vnd.github.v3+json" `
            -f tag_name=$ghNextRelease `
            -f previous_tag_name=$currentRelease `
            | ConvertFrom-Json

          $notes = $resp.body ?? "Initial release"

          gh release create "$ghNextRelease" `
            --title "$ghNextRelease" `
            --prerelease="$isPrerelease" `
            --notes $notes

          "VERSION=${nextRelease}" >> $env:GITHUB_OUTPUT
          "GITHUB_RELEASE=${ghNextRelease}" >> $env:GITHUB_OUTPUT

    outputs:
      VERSION: ${{ steps.create-release.outputs.VERSION }}
      GITHUB_RELEASE: ${{ steps.create-release.outputs.GITHUB_RELEASE }}

  release:
    runs-on: windows-latest
    needs:
      - check-skip-label
      - create-release
    if: ${{ needs.check-skip-label.outputs.should-skip != 'true' }}
    env:
      # We install the packages to the D:\ drive to avoid the slow IO on the C:\ drive.
      # Based on https://github.com/actions/setup-dotnet/issues/260#issuecomment-1790162905
      NUGET_PACKAGES: D:\a\.nuget\packages
      VERSION: ${{ needs.create-release.outputs.VERSION }}
      GITHUB_RELEASE: ${{ needs.create-release.outputs.GITHUB_RELEASE }}

    strategy:
      matrix:
        CONFIGURATION: [Release]
        platform: [x64, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ matrix.platform }}-nuget-${{ hashFiles('Directory.Packages.props') }}
          restore-keys: |
            ${{ matrix.platform }}-nuget-${{ hashFiles('Directory.Packages.props') }}
            ${{ matrix.platform }}-nuget-

      - name: Print version
        run: |
          echo "Version: $env:VERSION"

      - name: Restore dependencies
        env:
          CONFIGURATION: ${{ matrix.CONFIGURATION }}
        run: |
          dotnet restore Whim.sln -p:Configuration=$env:CONFIGURATION

      - name: Install dotnet tools
        run: |
          dotnet tool restore

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2.0.0

      - name: Build
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          msbuild Whim.sln `
            -p:Configuration=$env:CONFIGURATION `
            -p:Platform=$env:PLATFORM `
            -p:Version=$env:VERSION `
            -p:BuildInParallel=true `
            -maxCpuCount

      - name: Build release
        shell: pwsh
        env:
          Platform: ${{ matrix.platform }}
        run: |
          $installerPath = .\scripts\Create-Installer.ps1 -Architecture $env:PLATFORM
          "InstallerPath=${installerPath}" >> $env:GITHUB_ENV
          if (-not (Test-Path $installerPath)) {
            throw "Installer not found at $installerPath"
          }

      - name: Upload release assets
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${env:GITHUB_RELEASE}" "${env:InstallerPath}"
