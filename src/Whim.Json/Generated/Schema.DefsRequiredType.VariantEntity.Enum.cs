//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Whim.Json;
public readonly partial struct Schema
{
    public readonly partial struct DefsRequiredType
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct VariantEntity
        {
            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "context">The context to pass to the match function.</param>
            /// <param name = "matchColumnLayout">The function to call if the value matches the JSON value "\"ColumnLayout\"".</param>
            /// <param name = "matchRowLayout">The function to call if the value matches the JSON value "\"RowLayout\"".</param>
            /// <param name = "matchPrimaryStackLayout">The function to call if the value matches the JSON value "\"PrimaryStackLayout\"".</param>
            /// <param name = "matchMultiColumnLayout">The function to call if the value matches the JSON value "\"MultiColumnLayout\"".</param>
            /// <param name = "matchSecondaryPrimaryLayout">The function to call if the value matches the JSON value "\"SecondaryPrimaryLayout\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchColumnLayout, Func<TIn, TOut> matchRowLayout, Func<TIn, TOut> matchPrimaryStackLayout, Func<TIn, TOut> matchMultiColumnLayout, Func<TIn, TOut> matchSecondaryPrimaryLayout, Func<TIn, TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.ColumnLayoutUtf8))
                        {
                            return matchColumnLayout(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.RowLayoutUtf8))
                        {
                            return matchRowLayout(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.PrimaryStackLayoutUtf8))
                        {
                            return matchPrimaryStackLayout(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.MultiColumnLayoutUtf8))
                        {
                            return matchMultiColumnLayout(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.SecondaryPrimaryLayoutUtf8))
                        {
                            return matchSecondaryPrimaryLayout(context);
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "ColumnLayout":
                                return matchColumnLayout(context);
                            case "RowLayout":
                                return matchRowLayout(context);
                            case "PrimaryStackLayout":
                                return matchPrimaryStackLayout(context);
                            case "MultiColumnLayout":
                                return matchMultiColumnLayout(context);
                            case "SecondaryPrimaryLayout":
                                return matchSecondaryPrimaryLayout(context);
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch(context);
            }

            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "matchColumnLayout">The function to call if the value matches the JSON value "\"ColumnLayout\"".</param>
            /// <param name = "matchRowLayout">The function to call if the value matches the JSON value "\"RowLayout\"".</param>
            /// <param name = "matchPrimaryStackLayout">The function to call if the value matches the JSON value "\"PrimaryStackLayout\"".</param>
            /// <param name = "matchMultiColumnLayout">The function to call if the value matches the JSON value "\"MultiColumnLayout\"".</param>
            /// <param name = "matchSecondaryPrimaryLayout">The function to call if the value matches the JSON value "\"SecondaryPrimaryLayout\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TOut>(Func<TOut> matchColumnLayout, Func<TOut> matchRowLayout, Func<TOut> matchPrimaryStackLayout, Func<TOut> matchMultiColumnLayout, Func<TOut> matchSecondaryPrimaryLayout, Func<TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.ColumnLayoutUtf8))
                        {
                            return matchColumnLayout();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.RowLayoutUtf8))
                        {
                            return matchRowLayout();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.PrimaryStackLayoutUtf8))
                        {
                            return matchPrimaryStackLayout();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.MultiColumnLayoutUtf8))
                        {
                            return matchMultiColumnLayout();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.SecondaryPrimaryLayoutUtf8))
                        {
                            return matchSecondaryPrimaryLayout();
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "ColumnLayout":
                                return matchColumnLayout();
                            case "RowLayout":
                                return matchRowLayout();
                            case "PrimaryStackLayout":
                                return matchPrimaryStackLayout();
                            case "MultiColumnLayout":
                                return matchMultiColumnLayout();
                            case "SecondaryPrimaryLayout":
                                return matchSecondaryPrimaryLayout();
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch();
            }

            /// <summary>
            /// Permitted values.
            /// </summary>
            public static class EnumValues
            {
                /// <summary>
                /// Gets "ColumnLayout" as a JSON value.
                /// </summary>
                public static readonly VariantEntity ColumnLayout = VariantEntity.Parse("\"ColumnLayout\"");
                /// <summary>
                /// Gets "ColumnLayout" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> ColumnLayoutUtf8 => "ColumnLayout"u8;

                /// <summary>
                /// Gets "RowLayout" as a JSON value.
                /// </summary>
                public static readonly VariantEntity RowLayout = VariantEntity.Parse("\"RowLayout\"");
                /// <summary>
                /// Gets "RowLayout" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> RowLayoutUtf8 => "RowLayout"u8;

                /// <summary>
                /// Gets "PrimaryStackLayout" as a JSON value.
                /// </summary>
                public static readonly VariantEntity PrimaryStackLayout = VariantEntity.Parse("\"PrimaryStackLayout\"");
                /// <summary>
                /// Gets "PrimaryStackLayout" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> PrimaryStackLayoutUtf8 => "PrimaryStackLayout"u8;

                /// <summary>
                /// Gets "MultiColumnLayout" as a JSON value.
                /// </summary>
                public static readonly VariantEntity MultiColumnLayout = VariantEntity.Parse("\"MultiColumnLayout\"");
                /// <summary>
                /// Gets "MultiColumnLayout" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> MultiColumnLayoutUtf8 => "MultiColumnLayout"u8;

                /// <summary>
                /// Gets "SecondaryPrimaryLayout" as a JSON value.
                /// </summary>
                public static readonly VariantEntity SecondaryPrimaryLayout = VariantEntity.Parse("\"SecondaryPrimaryLayout\"");
                /// <summary>
                /// Gets "SecondaryPrimaryLayout" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> SecondaryPrimaryLayoutUtf8 => "SecondaryPrimaryLayout"u8;

                /// <summary>
                /// Gets "ColumnLayout" as a JSON value.
                /// </summary>
                internal static readonly VariantEntity Item0 = VariantEntity.Parse("\"ColumnLayout\"");
                /// <summary>
                /// Gets "RowLayout" as a JSON value.
                /// </summary>
                internal static readonly VariantEntity Item1 = VariantEntity.Parse("\"RowLayout\"");
                /// <summary>
                /// Gets "PrimaryStackLayout" as a JSON value.
                /// </summary>
                internal static readonly VariantEntity Item2 = VariantEntity.Parse("\"PrimaryStackLayout\"");
                /// <summary>
                /// Gets "MultiColumnLayout" as a JSON value.
                /// </summary>
                internal static readonly VariantEntity Item3 = VariantEntity.Parse("\"MultiColumnLayout\"");
                /// <summary>
                /// Gets "SecondaryPrimaryLayout" as a JSON value.
                /// </summary>
                internal static readonly VariantEntity Item4 = VariantEntity.Parse("\"SecondaryPrimaryLayout\"");
            }
        }
    }
}