//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Text.Json;
using Corvus.Json;

namespace Whim.Json;
public readonly partial struct Schema
{
    public readonly partial struct DefsRequiredType2
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The widgets to display on the left side of the bar
        /// </para>
        /// </remarks>
        public readonly partial struct BarWidgetEntityArray
        {
            private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Array)
                {
                    return result;
                }

                int arrayLength = 0;
                using var arrayEnumerator = this.EnumerateArray();
                while (arrayEnumerator.MoveNext())
                {
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushDocumentArrayIndex(arrayLength);
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationProperty("items");
                    }

                    result = arrayEnumerator.Current.As<Whim.Json.Schema.BarWidgetEntity>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation(); // items
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation(); // array index
                    }

                    arrayLength++;
                }

                return result;
            }
        }
    }
}