//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Whim.Json;
public readonly partial struct Schema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Plugin to add a bar and widgets to the top of the screen. For more, see https://dalyisaac.github.io/Whim/docs/plugins/bar.html
    /// </para>
    /// </remarks>
    public readonly partial struct DefsRequiredType2
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "IsEnabled"/>.
            /// </summary>
            public static ReadOnlySpan<byte> IsEnabledUtf8 => "isEnabled"u8;

            /// <summary>
            /// JSON property name for <see cref = "IsEnabled"/>.
            /// </summary>
            public const string IsEnabled = "isEnabled";
            /// <summary>
            /// JSON property name for <see cref = "LeftComponents"/>.
            /// </summary>
            public static ReadOnlySpan<byte> LeftComponentsUtf8 => "leftComponents"u8;

            /// <summary>
            /// JSON property name for <see cref = "LeftComponents"/>.
            /// </summary>
            public const string LeftComponents = "leftComponents";
            /// <summary>
            /// JSON property name for <see cref = "Type"/>.
            /// </summary>
            public static ReadOnlySpan<byte> TypeUtf8 => "type"u8;

            /// <summary>
            /// JSON property name for <see cref = "Type"/>.
            /// </summary>
            public const string Type = "type";
        }

        /// <summary>
        /// Gets the (optional) <c>isEnabled</c> property.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Whether the plugin is enabled
        /// </para>
        /// </remarks>
        public Corvus.Json.JsonBoolean IsEnabled
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.IsEnabledUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonBoolean(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.IsEnabled, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonBoolean>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>leftComponents</c> property.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The widgets to display on the left side of the bar
        /// </para>
        /// </remarks>
        public Whim.Json.Schema.DefsRequiredType2.BarWidgetEntityArray LeftComponents
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LeftComponentsUtf8, out JsonElement result))
                    {
                        return new Whim.Json.Schema.DefsRequiredType2.BarWidgetEntityArray(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.LeftComponents, out JsonAny result))
                    {
                        return result.As<Whim.Json.Schema.DefsRequiredType2.BarWidgetEntityArray>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the <c>type</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The unique identifier of this BarPlugin
        /// </para>
        /// </remarks>
        public Whim.Json.Schema.DefsRequiredType2.TheUniqueIdentifierOfThisBarPlugin Type
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TypeUtf8, out JsonElement result))
                    {
                        return new Whim.Json.Schema.DefsRequiredType2.TheUniqueIdentifierOfThisBarPlugin(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Type, out JsonAny result))
                    {
                        return result.As<Whim.Json.Schema.DefsRequiredType2.TheUniqueIdentifierOfThisBarPlugin>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "DefsRequiredType2"/>.
        /// </summary>
        public static DefsRequiredType2 Create(Corvus.Json.JsonBoolean? isEnabled = null, Whim.Json.Schema.DefsRequiredType2.BarWidgetEntityArray? leftComponents = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            builder.Add(JsonPropertyNames.Type, new Whim.Json.Schema.DefsRequiredType2.TheUniqueIdentifierOfThisBarPlugin().AsAny);
            if (isEnabled is Corvus.Json.JsonBoolean isEnabled__)
            {
                builder.Add(JsonPropertyNames.IsEnabled, isEnabled__.AsAny);
            }

            if (leftComponents is Whim.Json.Schema.DefsRequiredType2.BarWidgetEntityArray leftComponents__)
            {
                builder.Add(JsonPropertyNames.LeftComponents, leftComponents__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <summary>
        /// Sets isEnabled.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public DefsRequiredType2 WithIsEnabled(in Corvus.Json.JsonBoolean value)
        {
            return this.SetProperty(JsonPropertyNames.IsEnabled, value);
        }

        /// <summary>
        /// Sets leftComponents.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public DefsRequiredType2 WithLeftComponents(in Whim.Json.Schema.DefsRequiredType2.BarWidgetEntityArray value)
        {
            return this.SetProperty(JsonPropertyNames.LeftComponents, value);
        }

        private static ValidationContext __CorvusValidateType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Whim.Json.Schema.DefsRequiredType2.TheUniqueIdentifierOfThisBarPlugin>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateIsEnabled(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonBoolean>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateLeftComponents(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Whim.Json.Schema.DefsRequiredType2.BarWidgetEntityArray>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.TypeUtf8))
                {
                    propertyValidator = __CorvusValidateType;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.IsEnabledUtf8))
                {
                    propertyValidator = __CorvusValidateIsEnabled;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.LeftComponentsUtf8))
                {
                    propertyValidator = __CorvusValidateLeftComponents;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.Type))
                {
                    propertyValidator = __CorvusValidateType;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.IsEnabled))
                {
                    propertyValidator = __CorvusValidateIsEnabled;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.LeftComponents))
                {
                    propertyValidator = __CorvusValidateLeftComponents;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}