//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Whim.Json;
public readonly partial struct Schema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct PluginEntity
    {
        /// <summary>
        /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <param name = "context">The context to pass to the match function.</param>
        /// <param name = "match0">The function to call if the value matches the <see cref = "Whim.Json.Schema.DefsRequiredType4"/> type.</param>
        /// <param name = "match1">The function to call if the value matches the <see cref = "Whim.Json.Schema.DefsRequiredType3"/> type.</param>
        /// <param name = "match2">The function to call if the value matches the <see cref = "Whim.Json.Schema.DefsRequiredType2"/> type.</param>
        /// <param name = "defaultMatch">The fallback match.</param>
        public TOut Match<TIn, TOut>(in TIn context, Matcher<Whim.Json.Schema.DefsRequiredType4, TIn, TOut> match0, Matcher<Whim.Json.Schema.DefsRequiredType3, TIn, TOut> match1, Matcher<Whim.Json.Schema.DefsRequiredType2, TIn, TOut> match2, Matcher<PluginEntity, TIn, TOut> defaultMatch)
        {
            var oneOf0 = this.As<Whim.Json.Schema.DefsRequiredType4>();
            if (oneOf0.IsValid())
            {
                return match0(oneOf0, context);
            }

            var oneOf1 = this.As<Whim.Json.Schema.DefsRequiredType3>();
            if (oneOf1.IsValid())
            {
                return match1(oneOf1, context);
            }

            var oneOf2 = this.As<Whim.Json.Schema.DefsRequiredType2>();
            if (oneOf2.IsValid())
            {
                return match2(oneOf2, context);
            }

            return defaultMatch(this, context);
        }

        /// <summary>
        /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <param name = "match0">The function to call if the value matches the <see cref = "Whim.Json.Schema.DefsRequiredType4"/> type.</param>
        /// <param name = "match1">The function to call if the value matches the <see cref = "Whim.Json.Schema.DefsRequiredType3"/> type.</param>
        /// <param name = "match2">The function to call if the value matches the <see cref = "Whim.Json.Schema.DefsRequiredType2"/> type.</param>
        /// <param name = "defaultMatch">The fallback match.</param>
        public TOut Match<TOut>(Matcher<Whim.Json.Schema.DefsRequiredType4, TOut> match0, Matcher<Whim.Json.Schema.DefsRequiredType3, TOut> match1, Matcher<Whim.Json.Schema.DefsRequiredType2, TOut> match2, Matcher<PluginEntity, TOut> defaultMatch)
        {
            var oneOf0 = this.As<Whim.Json.Schema.DefsRequiredType4>();
            if (oneOf0.IsValid())
            {
                return match0(oneOf0);
            }

            var oneOf1 = this.As<Whim.Json.Schema.DefsRequiredType3>();
            if (oneOf1.IsValid())
            {
                return match1(oneOf1);
            }

            var oneOf2 = this.As<Whim.Json.Schema.DefsRequiredType2>();
            if (oneOf2.IsValid())
            {
                return match2(oneOf2);
            }

            return defaultMatch(this);
        }
    }
}