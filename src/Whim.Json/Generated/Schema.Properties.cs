//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Whim.Json;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Schema
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// JSON property name for <see cref = "Filters"/>.
        /// </summary>
        public static ReadOnlySpan<byte> FiltersUtf8 => "filters"u8;

        /// <summary>
        /// JSON property name for <see cref = "Filters"/>.
        /// </summary>
        public const string Filters = "filters";
        /// <summary>
        /// JSON property name for <see cref = "Keybinds"/>.
        /// </summary>
        public static ReadOnlySpan<byte> KeybindsUtf8 => "keybinds"u8;

        /// <summary>
        /// JSON property name for <see cref = "Keybinds"/>.
        /// </summary>
        public const string Keybinds = "keybinds";
        /// <summary>
        /// JSON property name for <see cref = "LayoutEngines"/>.
        /// </summary>
        public static ReadOnlySpan<byte> LayoutEnginesUtf8 => "layoutEngines"u8;

        /// <summary>
        /// JSON property name for <see cref = "LayoutEngines"/>.
        /// </summary>
        public const string LayoutEngines = "layoutEngines";
        /// <summary>
        /// JSON property name for <see cref = "Monitors"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MonitorsUtf8 => "monitors"u8;

        /// <summary>
        /// JSON property name for <see cref = "Monitors"/>.
        /// </summary>
        public const string Monitors = "monitors";
        /// <summary>
        /// JSON property name for <see cref = "Plugins"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PluginsUtf8 => "plugins"u8;

        /// <summary>
        /// JSON property name for <see cref = "Plugins"/>.
        /// </summary>
        public const string Plugins = "plugins";
        /// <summary>
        /// JSON property name for <see cref = "Routers"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RoutersUtf8 => "routers"u8;

        /// <summary>
        /// JSON property name for <see cref = "Routers"/>.
        /// </summary>
        public const string Routers = "routers";
        /// <summary>
        /// JSON property name for <see cref = "Workspaces"/>.
        /// </summary>
        public static ReadOnlySpan<byte> WorkspacesUtf8 => "workspaces"u8;

        /// <summary>
        /// JSON property name for <see cref = "Workspaces"/>.
        /// </summary>
        public const string Workspaces = "workspaces";
    }

    /// <summary>
    /// Gets the <c>filters</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Filters to apply to windows to determine whether they should be managed by Whim
    /// </para>
    /// </remarks>
    public Whim.Json.Schema.RequiredTypeAndValueArray Filters
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.FiltersUtf8, out JsonElement result))
                {
                    return new Whim.Json.Schema.RequiredTypeAndValueArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Filters, out JsonAny result))
                {
                    return result.As<Whim.Json.Schema.RequiredTypeAndValueArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>keybinds</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Mappings of commands to keybinds
    /// </para>
    /// </remarks>
    public Whim.Json.Schema.RequiredCommandAndKeybindArray Keybinds
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.KeybindsUtf8, out JsonElement result))
                {
                    return new Whim.Json.Schema.RequiredCommandAndKeybindArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Keybinds, out JsonAny result))
                {
                    return result.As<Whim.Json.Schema.RequiredCommandAndKeybindArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>layoutEngines</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    public Whim.Json.Schema.LayoutEngineEntityArray LayoutEngines
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LayoutEnginesUtf8, out JsonElement result))
                {
                    return new Whim.Json.Schema.LayoutEngineEntityArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.LayoutEngines, out JsonAny result))
                {
                    return result.As<Whim.Json.Schema.LayoutEngineEntityArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>monitors</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Specifies the workspaces that can be displayed on each monitor
    /// </para>
    /// </remarks>
    public Whim.Json.Schema.MonitorEntityArray Monitors
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MonitorsUtf8, out JsonElement result))
                {
                    return new Whim.Json.Schema.MonitorEntityArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Monitors, out JsonAny result))
                {
                    return result.As<Whim.Json.Schema.MonitorEntityArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>plugins</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    public Whim.Json.Schema.PluginEntityArray Plugins
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PluginsUtf8, out JsonElement result))
                {
                    return new Whim.Json.Schema.PluginEntityArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Plugins, out JsonAny result))
                {
                    return result.As<Whim.Json.Schema.PluginEntityArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>routers</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Routers to determine which workspace a window should be placed in
    /// </para>
    /// </remarks>
    public Whim.Json.Schema.RouterEntityArray Routers
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RoutersUtf8, out JsonElement result))
                {
                    return new Whim.Json.Schema.RouterEntityArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Routers, out JsonAny result))
                {
                    return result.As<Whim.Json.Schema.RouterEntityArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>workspaces</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The workspaces to create
    /// </para>
    /// </remarks>
    public Whim.Json.Schema.RequiredNameArray Workspaces
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.WorkspacesUtf8, out JsonElement result))
                {
                    return new Whim.Json.Schema.RequiredNameArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Workspaces, out JsonAny result))
                {
                    return result.As<Whim.Json.Schema.RequiredNameArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Schema"/>.
    /// </summary>
    public static Schema Create(Whim.Json.Schema.RequiredTypeAndValueArray filters, Whim.Json.Schema.RequiredCommandAndKeybindArray keybinds, Whim.Json.Schema.LayoutEngineEntityArray layoutEngines, Whim.Json.Schema.MonitorEntityArray monitors, Whim.Json.Schema.PluginEntityArray plugins, Whim.Json.Schema.RouterEntityArray routers, Whim.Json.Schema.RequiredNameArray workspaces)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.Filters, filters.AsAny);
        builder.Add(JsonPropertyNames.Keybinds, keybinds.AsAny);
        builder.Add(JsonPropertyNames.LayoutEngines, layoutEngines.AsAny);
        builder.Add(JsonPropertyNames.Monitors, monitors.AsAny);
        builder.Add(JsonPropertyNames.Plugins, plugins.AsAny);
        builder.Add(JsonPropertyNames.Routers, routers.AsAny);
        builder.Add(JsonPropertyNames.Workspaces, workspaces.AsAny);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Sets filters.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithFilters(in Whim.Json.Schema.RequiredTypeAndValueArray value)
    {
        return this.SetProperty(JsonPropertyNames.Filters, value);
    }

    /// <summary>
    /// Sets keybinds.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithKeybinds(in Whim.Json.Schema.RequiredCommandAndKeybindArray value)
    {
        return this.SetProperty(JsonPropertyNames.Keybinds, value);
    }

    /// <summary>
    /// Sets layoutEngines.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithLayoutEngines(in Whim.Json.Schema.LayoutEngineEntityArray value)
    {
        return this.SetProperty(JsonPropertyNames.LayoutEngines, value);
    }

    /// <summary>
    /// Sets monitors.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMonitors(in Whim.Json.Schema.MonitorEntityArray value)
    {
        return this.SetProperty(JsonPropertyNames.Monitors, value);
    }

    /// <summary>
    /// Sets plugins.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithPlugins(in Whim.Json.Schema.PluginEntityArray value)
    {
        return this.SetProperty(JsonPropertyNames.Plugins, value);
    }

    /// <summary>
    /// Sets routers.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithRouters(in Whim.Json.Schema.RouterEntityArray value)
    {
        return this.SetProperty(JsonPropertyNames.Routers, value);
    }

    /// <summary>
    /// Sets workspaces.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithWorkspaces(in Whim.Json.Schema.RequiredNameArray value)
    {
        return this.SetProperty(JsonPropertyNames.Workspaces, value);
    }

    private static ValidationContext __CorvusValidateWorkspaces(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Whim.Json.Schema.RequiredNameArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLayoutEngines(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Whim.Json.Schema.LayoutEngineEntityArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMonitors(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Whim.Json.Schema.MonitorEntityArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateKeybinds(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Whim.Json.Schema.RequiredCommandAndKeybindArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFilters(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Whim.Json.Schema.RequiredTypeAndValueArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRouters(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Whim.Json.Schema.RouterEntityArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePlugins(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Whim.Json.Schema.PluginEntityArray>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(JsonPropertyNames.WorkspacesUtf8))
            {
                propertyValidator = __CorvusValidateWorkspaces;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.LayoutEnginesUtf8))
            {
                propertyValidator = __CorvusValidateLayoutEngines;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MonitorsUtf8))
            {
                propertyValidator = __CorvusValidateMonitors;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.KeybindsUtf8))
            {
                propertyValidator = __CorvusValidateKeybinds;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.FiltersUtf8))
            {
                propertyValidator = __CorvusValidateFilters;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.RoutersUtf8))
            {
                propertyValidator = __CorvusValidateRouters;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.PluginsUtf8))
            {
                propertyValidator = __CorvusValidatePlugins;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(JsonPropertyNames.Workspaces))
            {
                propertyValidator = __CorvusValidateWorkspaces;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.LayoutEngines))
            {
                propertyValidator = __CorvusValidateLayoutEngines;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Monitors))
            {
                propertyValidator = __CorvusValidateMonitors;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Keybinds))
            {
                propertyValidator = __CorvusValidateKeybinds;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Filters))
            {
                propertyValidator = __CorvusValidateFilters;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Routers))
            {
                propertyValidator = __CorvusValidateRouters;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Plugins))
            {
                propertyValidator = __CorvusValidatePlugins;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}