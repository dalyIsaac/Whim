//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Whim.Json;
public readonly partial struct Schema
{
    public readonly partial struct RequiredTypeAndValue
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The type of filter to apply. For more, see https://dalyisaac.github.io/Whim/docs/customize/filtering.html
        /// </para>
        /// </remarks>
        public readonly partial struct TypeEntity
        {
            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "context">The context to pass to the match function.</param>
            /// <param name = "matchWindowClass">The function to call if the value matches the JSON value "\"windowClass\"".</param>
            /// <param name = "matchProcessFileName">The function to call if the value matches the JSON value "\"processFileName\"".</param>
            /// <param name = "matchTitle">The function to call if the value matches the JSON value "\"title\"".</param>
            /// <param name = "matchTitleMatch">The function to call if the value matches the JSON value "\"titleMatch\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchWindowClass, Func<TIn, TOut> matchProcessFileName, Func<TIn, TOut> matchTitle, Func<TIn, TOut> matchTitleMatch, Func<TIn, TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.WindowClassUtf8))
                        {
                            return matchWindowClass(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.ProcessFileNameUtf8))
                        {
                            return matchProcessFileName(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.TitleUtf8))
                        {
                            return matchTitle(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.TitleMatchUtf8))
                        {
                            return matchTitleMatch(context);
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "windowClass":
                                return matchWindowClass(context);
                            case "processFileName":
                                return matchProcessFileName(context);
                            case "title":
                                return matchTitle(context);
                            case "titleMatch":
                                return matchTitleMatch(context);
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch(context);
            }

            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "matchWindowClass">The function to call if the value matches the JSON value "\"windowClass\"".</param>
            /// <param name = "matchProcessFileName">The function to call if the value matches the JSON value "\"processFileName\"".</param>
            /// <param name = "matchTitle">The function to call if the value matches the JSON value "\"title\"".</param>
            /// <param name = "matchTitleMatch">The function to call if the value matches the JSON value "\"titleMatch\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TOut>(Func<TOut> matchWindowClass, Func<TOut> matchProcessFileName, Func<TOut> matchTitle, Func<TOut> matchTitleMatch, Func<TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.WindowClassUtf8))
                        {
                            return matchWindowClass();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.ProcessFileNameUtf8))
                        {
                            return matchProcessFileName();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.TitleUtf8))
                        {
                            return matchTitle();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.TitleMatchUtf8))
                        {
                            return matchTitleMatch();
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "windowClass":
                                return matchWindowClass();
                            case "processFileName":
                                return matchProcessFileName();
                            case "title":
                                return matchTitle();
                            case "titleMatch":
                                return matchTitleMatch();
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch();
            }

            /// <summary>
            /// Permitted values.
            /// </summary>
            public static class EnumValues
            {
                /// <summary>
                /// Gets "windowClass" as a JSON value.
                /// </summary>
                public static readonly TypeEntity WindowClass = TypeEntity.Parse("\"windowClass\"");
                /// <summary>
                /// Gets "windowClass" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> WindowClassUtf8 => "windowClass"u8;

                /// <summary>
                /// Gets "processFileName" as a JSON value.
                /// </summary>
                public static readonly TypeEntity ProcessFileName = TypeEntity.Parse("\"processFileName\"");
                /// <summary>
                /// Gets "processFileName" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> ProcessFileNameUtf8 => "processFileName"u8;

                /// <summary>
                /// Gets "title" as a JSON value.
                /// </summary>
                public static readonly TypeEntity Title = TypeEntity.Parse("\"title\"");
                /// <summary>
                /// Gets "title" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> TitleUtf8 => "title"u8;

                /// <summary>
                /// Gets "titleMatch" as a JSON value.
                /// </summary>
                public static readonly TypeEntity TitleMatch = TypeEntity.Parse("\"titleMatch\"");
                /// <summary>
                /// Gets "titleMatch" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> TitleMatchUtf8 => "titleMatch"u8;

                /// <summary>
                /// Gets "windowClass" as a JSON value.
                /// </summary>
                internal static readonly TypeEntity Item0 = TypeEntity.Parse("\"windowClass\"");
                /// <summary>
                /// Gets "processFileName" as a JSON value.
                /// </summary>
                internal static readonly TypeEntity Item1 = TypeEntity.Parse("\"processFileName\"");
                /// <summary>
                /// Gets "title" as a JSON value.
                /// </summary>
                internal static readonly TypeEntity Item2 = TypeEntity.Parse("\"title\"");
                /// <summary>
                /// Gets "titleMatch" as a JSON value.
                /// </summary>
                internal static readonly TypeEntity Item3 = TypeEntity.Parse("\"titleMatch\"");
            }
        }
    }
}