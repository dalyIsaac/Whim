//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Whim.Json;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Schema
{
    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;
        if (valueKind != JsonValueKind.Object)
        {
            return result;
        }

        int propertyCount = 0;
        bool foundFilters = false;
        bool foundKeybinds = false;
        bool foundLayoutEngines = false;
        bool foundMonitors = false;
        bool foundPlugins = false;
        bool foundRouters = false;
        bool foundWorkspaces = false;
        foreach (JsonObjectProperty property in this.EnumerateObject())
        {
            if (__TryGetCorvusLocalPropertiesValidator(property, this.HasJsonElementBacking, out ObjectPropertyValidator? propertyValidator))
            {
                result = result.WithLocalProperty(propertyCount);
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushDocumentProperty("properties", property.Name.GetString());
                }

                var propertyResult = propertyValidator(property, result.CreateChildContext(), level);
                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation(); // property name
                }

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if ((this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.FiltersUtf8)) || (!this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.Filters)))
                {
                    foundFilters = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.KeybindsUtf8)) || (!this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.Keybinds)))
                {
                    foundKeybinds = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.LayoutEnginesUtf8)) || (!this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.LayoutEngines)))
                {
                    foundLayoutEngines = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.MonitorsUtf8)) || (!this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.Monitors)))
                {
                    foundMonitors = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.PluginsUtf8)) || (!this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.Plugins)))
                {
                    foundPlugins = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.RoutersUtf8)) || (!this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.Routers)))
                {
                    foundRouters = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.WorkspacesUtf8)) || (!this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.Workspaces)))
                {
                    foundWorkspaces = true;
                }
            }

            if (!result.HasEvaluatedLocalProperty(propertyCount))
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $"9.3.2.3. additionalProperties - additional property \"{property.Name}\" is not permitted.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "9.3.2.3. additionalProperties - additional properties are not permitted.");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            propertyCount++;
        }

        if (!foundFilters)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"filters\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundKeybinds)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"keybinds\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundLayoutEngines)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"layoutEngines\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundMonitors)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"monitors\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundPlugins)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"plugins\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundRouters)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"routers\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundWorkspaces)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"workspaces\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        return result;
    }
}