{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/dalyIsaac/Whim/main/src/Whim/Config/schema.json",

  "type": "object",
  "additionalProperties": false,

  "properties": {
    "workspaces": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": { "$ref": "#/$defs/Workspace" },
          "description": "Workspaces to use"
        }
      }
    },

    "layout_engines": {
      "$ref": "#/$defs/LayoutEngineList"
    },

    "keybinds": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": { "$ref": "#/$defs/Keybind" },
          "description": "Mappings of commands to keybinds"
        },

        "unify_key_modifiers": {
          "type": "boolean",
          "description": "Whether to treat key modifiers like `LWin` and `RWin` as the same key modifier. Defaults to `true`.",
          "default": true
        }
      }
    },

    "filters": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": { "$ref": "#/$defs/Filter" },
          "description": "Filters to apply to windows to determine whether they should be managed by Whim"
        }
      }
    },

    "routers": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": { "$ref": "#/$defs/Router" },
          "description": "Routers to determine which workspace a window should be placed in"
        },

        "routing_behavior": {
          "$ref": "#/$defs/RoutingBehavior",
          "description": "The behavior to use when routing windows to workspaces"
        }
      }
    },

    "plugins": {
      "type": "object",
      "properties": {
        "bar": {
          "$ref": "#/$defs/BarPlugin",
          "description": "Plugin to add a bar"
        },

        "gaps": {
          "$ref": "#/$defs/GapsPlugin",
          "description": "Plugin to add gaps between windows"
        },

        "command_palette": {
          "$ref": "#/$defs/CommandPalettePlugin",
          "description": "Plugin to add a command palette"
        },

        "floating_window": {
          "$ref": "#/$defs/FloatingWindowPlugin",
          "description": "Plugin to allow windows to float outside of other layouts"
        },

        "focus_indicator": {
          "$ref": "#/$defs/FocusIndicatorPlugin",
          "description": "Plugin to add a focus indicator"
        },

        "layout_preview": {
          "$ref": "#/$defs/LayoutPreviewPlugin",
          "description": "Plugin to add a layout preview"
        },

        "updater": {
          "$ref": "#/$defs/UpdaterPlugin",
          "description": "Plugin to add an updater"
        },

        "slice_layout": {
          "$ref": "#/$defs/SliceLayoutPlugin",
          "description": "Plugin to add a slice layout"
        },

        "tree_layout": {
          "$ref": "#/$defs/TreeLayoutPlugin",
          "description": "Plugin to add a tree layout"
        }
      }
    }
  },

  "$defs": {
    "Workspace": {
      "required": ["name"],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the workspace"
        },
        "layout_engines": {
          "$ref": "#/$defs/LayoutEngineList",
          "description": "The layout engines to use for the workspace. If not specified, the layout engines in `layout_engines` will be used."
        }
      }
    },

    "LayoutEngineList": {
      "type": "object",
      "required": ["entries"],
      "properties": {
        "entries": {
          "type": "array",
          "items": { "$ref": "#/$defs/LayoutEngine" },
          "description": "Layout engines to use for workspaces"
        }
      }
    },

    "LayoutEngine": {
      "required": ["type"],
      "anyOf": [
        { "$ref": "#/$defs/FloatingWindowEngine" },
        { "$ref": "#/$defs/FocusLayoutEngine" },
        { "$ref": "#/$defs/SliceLayoutEngine" },
        { "$ref": "#/$defs/TreeLayoutEngine" }
      ]
    },

    "FloatingWindowEngine": {
      "type": "object",
      "description": "A layout engine that allows windows to arbitrarily float in any position or size",
      "required": ["type"],
      "additionalProperties": false,
      "properties": {
        "type": { "const": "floating" }
      }
    },

    "FocusLayoutEngine": {
      "type": "object",
      "description": "A layout engine that displays one window at a time",
      "required": ["type"],
      "additionalProperties": false,
      "properties": {
        "type": { "const": "focus" },
        "maximize": {
          "type": "boolean",
          "description": "Whether the focused window should be maximized",
          "default": false
        }
      }
    },

    "SliceLayoutEngine": {
      "type": "object",
      "description": "A layout engine that divides the screen into \"areas\", which correspond to \"slices\" of a list of windows. This can be used to accomplish a variety of layouts, including master-stack layouts.",
      "required": ["type", "variant"],
      "additionalProperties": false,
      "properties": {
        "type": { "const": "slice" },
        "variant": {
          "anyOf": [
            {
              "type": "object",
              "required": ["type"],
              "additionalProperties": false,
              "description": "Creates a column layout, where windows are stacked vertically.",
              "properties": {
                "type": {
                  "const": "column"
                }
              }
            },
            {
              "type": "object",
              "required": ["type"],
              "additionalProperties": false,
              "description": "Creates a row layout, where windows are stacked horizontally.",
              "properties": {
                "type": {
                  "const": "row"
                }
              }
            },
            {
              "type": "object",
              "required": ["type"],
              "additionalProperties": false,
              "description": "Creates a primary stack layout, where the first window takes up half the screen, and the remaining windows are stacked vertically on the other half.",
              "properties": {
                "type": {
                  "const": "primary_stack"
                }
              }
            },
            {
              "type": "object",
              "required": ["type", "columns"],
              "additionalProperties": false,
              "description": "Creates a multi-column layout with the given number of windows in each column. [2, 1, 0] will create a layout with 3 columns, where the first column has 2 windows, the second column has 1 window, and the third column has infinite windows.",
              "properties": {
                "type": {
                  "const": "multi_column_stack"
                },
                "columns": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              }
            },
            {
              "type": "object",
              "required": ["type"],
              "additionalProperties": false,
              "description": "Creates a three-column layout, where the primary column is in the middle, the secondary column is on the left, and the overflow column is on the right. The middle column takes up 50% of ths creen, and the left and right columns take up 25%.",
              "properties": {
                "type": {
                  "const": "secondary_primary_stack"
                },
                "primary_capacity": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The number of rows in the primary column. This must be a non-negative integer.",
                  "default": 1
                },
                "secondary_capacity": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The number of rows in the secondary column. This must be a non-negative integer.",
                  "default": 2
                }
              }
            }
          ]
        }
      }
    },

    "TreeLayoutEngine": {
      "type": "object",
      "description": "A layout engine that arranges windows in a tree structure",
      "required": ["type"],
      "additionalProperties": false,
      "properties": {
        "type": { "const": "tree" },
        "initial_direction": {
          "anyOf": [
            {
              "const": "left"
            },
            {
              "const": "right"
            },
            {
              "const": "up"
            },
            {
              "const": "down"
            }
          ],
          "description": "The initial direction to add windows in"
        }
      }
    },

    "Keybind": {
      "type": "object",
      "required": ["command", "keybind"],
      "additionalProperties": false,
      "properties": {
        "command": {
          "type": "string",
          "description": "The identifier of the command to run. For more, see https://dalyisaac.github.io/Whim/configure/core/commands.html"
        },
        "keybind": {
          "type": "string",
          "description": "The keybind to trigger the command. For more, see https://dalyisaac.github.io/Whim/configure/core/keybinds.html"
        }
      }
    },

    "Filter": {
      "type": "object",
      "required": ["type", "value"],
      "additionalProperties": false,
      "properties": {
        "type": {
          "anyOf": [
            {
              "const": "window_class",
              "description": "Ignores windows with the specified window class"
            },
            {
              "const": "process_file_name",
              "description": "Ignores windows with the specified process file name"
            },
            {
              "const": "title",
              "description": "Ignores windows with the specified title"
            },
            {
              "const": "title_regex",
              "description": "Ignores windows with a title that matches the specified regex"
            }
          ]
        },
        "value": {
          "type": "string",
          "description": "The value to filter by"
        }
      }
    },

    "Router": {
      "type": "object",
      "required": ["type", "value", "workspace_name"],
      "additionalProperties": false,
      "properties": {
        "type": {
          "anyOf": [
            {
              "const": "window_class",
              "description": "Routes windows with the specified window class to the specified workspace"
            },
            {
              "const": "process_file_name",
              "description": "Routes windows with the specified process file name to the specified workspace"
            },
            {
              "const": "title",
              "description": "Routes windows with the specified title to the specified workspace"
            },
            {
              "const": "title_regex",
              "description": "Routes windows with a title that matches the specified regex to the specified workspace"
            }
          ]
        },
        "value": { "type": "string", "description": "The value to route by" },
        "workspace_name": {
          "type": "string",
          "description": "The workspace to route to"
        }
      }
    },

    "RoutingBehavior": {
      "anyOf": [
        {
          "const": "route_to_launched_workspace",
          "description": "Routes windows to the workspace that the window was launched on by Windows."
        },
        {
          "const": "route_to_active_workspace",
          "description": "Routes windows to the workspace which last received an event sent by Windows."
        },
        {
          "const": "route_to_last_tracked_active_workspace",
          "description": "Routes windows to the workspace which last received an event sent by Windows which Whim did not ignore."
        }
      ],
      "default": "route_to_launched_workspace"
    },

    "WindowBackdropConfig": {
      "type": "object",
      "description": "WinUI supports different backdrops/materials, depending on the OS version. To see the different materials available, see <see href='https://learn.microsoft.com/en-us/windows/apps/design/signature-experiences/materials'/>. The different materials support differing levels and style of transparency. This config lets you specify which backdrop to use for a given Whim window.",
      "properties": {
        "type": {
          "anyOf": [
            {
              "const": "none",
              "description": "No backdrop"
            },
            {
              "const": "acrylic",
              "description": "Acrylic backdrop - see <see href='https://learn.microsoft.com/en-us/windows/apps/design/style/acrylic'/>."
            },
            {
              "const": "acrylic_thin",
              "description": "A more transparent Acrylic backdrop - based on the Acrylic backdrop."
            },
            {
              "const": "mica",
              "description": "Mica backdrop - see <see href='https://learn.microsoft.com/en-us/windows/apps/design/style/mica'/>. Unsupported on Windows 10 - Whim will fall back to Acrylic."
            },
            {
              "const": "mica_alt",
              "description": "A Mica variant which looks different to Mica - see <see href='https://learn.microsoft.com/en-us/windows/apps/design/style/mica'/>. Unsupported on Windows 10 - Whim will fall back to Acrylic."
            }
          ],
          "default": "mica"
        },
        "always_show_backdrop": {
          "type": "boolean",
          "description": "By default, WinUI will disable the backdrop when the window loses focus. Whim overrides this setting. Set this to false to disable the backdrop when the window loses focus.",
          "default": true
        }
      }
    },

    "BarPlugin": {
      "type": "object",
      "description": "Plugin to add a bar. For more, see https://dalyisaac.github.io/Whim/configure/plugins/bar.html",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether the plugin is enabled",
          "default": true
        },
        "height": {
          "type": "integer",
          "description": "The height of the bar in pixels",
          "default": 30
        },
        "backdrop": {
          "$ref": "#/$defs/WindowBackdropConfig",
          "description": "The backdrop to use for the bar"
        },
        "left_components": {
          "$ref": "#/$defs/BarWidgetList",
          "description": "The widgets to display on the left side of the bar"
        },
        "center_components": {
          "$ref": "#/$defs/BarWidgetList",
          "description": "The widgets to display in the center of the bar"
        },
        "right_components": {
          "$ref": "#/$defs/BarWidgetList",
          "description": "The widgets to display on the right side of the bar"
        }
      }
    },

    "BarWidgetList": {
      "type": "object",
      "required": ["entries"],
      "properties": {
        "entries": {
          "type": "array",
          "items": { "$ref": "#/$defs/Widget" },
          "description": "Widgets to display on the bar"
        }
      }
    },

    "Widget": {
      "required": ["type"],
      "anyOf": [
        {
          "$ref": "#/$defs/ActiveLayoutWidget"
        },
        {
          "$ref": "#/$defs/BatteryWidget"
        },
        {
          "$ref": "#/$defs/DateTimeWidget"
        },
        {
          "$ref": "#/$defs/FocusedWindowWidget"
        },
        {
          "$ref": "#/$defs/WorkspaceWidget"
        },
        {
          "$ref": "#/$defs/TreeLayoutEngineWidget"
        }
      ]
    },

    "ActiveLayoutWidget": {
      "type": "object",
      "description": "A widget to display the active layout",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "const": "active_layout_widget"
        }
      }
    },

    "BatteryWidget": {
      "type": "object",
      "description": "A widget to display the battery status",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "const": "battery_widget"
        }
      }
    },

    "DateTimeWidget": {
      "type": "object",
      "description": "A widget to display the date and time",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "const": "date_time_widget"
        },
        "interval": {
          "type": "integer",
          "description": "The interval in milliseconds to update the date and time",
          "default": 1000
        },
        "format": {
          "type": "string",
          "description": "The format to display the date and time in. For more, see https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings",
          "default": "HH:mm:ss dd-MMM-yyyy"
        }
      }
    },

    "FocusedWindowWidget": {
      "type": "object",
      "description": "A widget to display the focused window",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "const": "focused_window_widget"
        },
        "shorten_title": {
          "type": "boolean",
          "description": "Whether to shorten the title of the focused window",
          "default": false
        }
      }
    },

    "WorkspaceWidget": {
      "type": "object",
      "description": "A widget to display the workspace",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "const": "workspace_widget"
        }
      }
    },

    "TreeLayoutEngineWidget": {
      "type": "object",
      "description": "A widget to display the direction to add windows in the tree layout engine on the current workspace",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "const": "tree_layout_widget"
        }
      }
    },

    "GapsPlugin": {
      "type": "object",
      "description": "Plugin to add gaps between windows. For more, see https://dalyisaac.github.io/Whim/configure/plugins/gaps.html",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether the plugin is enabled",
          "default": true
        },
        "outer_gap": {
          "type": "integer",
          "description": "The gap between the parent layout engine and the area where windows are placed",
          "default": 10
        },
        "inner_gap": {
          "type": "integer",
          "description": "The gap between windows",
          "default": 10
        },
        "default_outer_delta": {
          "type": "integer",
          "description": "The default outer gap used by commands `gaps.outer.increase` and `gaps.outer.decrease`",
          "default": 2
        },
        "default_inner_delta": {
          "type": "integer",
          "description": "The default inner gap used by commands `gaps.inner.increase` and `gaps.inner.decrease`",
          "default": 2
        }
      }
    },

    "CommandPalettePlugin": {
      "type": "object",
      "description": "Plugin to add a command palette. For more, see https://dalyisaac.github.io/Whim/configure/plugins/command-palette.html",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether the plugin is enabled",
          "default": true
        },
        "max_height_percent": {
          "type": "integer",
          "description": "The maximum height of the command palette as a percentage of the monitor height",
          "default": 40
        },
        "max_width_pixels": {
          "type": "integer",
          "description": "The maximum width of the command palette in pixels",
          "default": 800
        },
        "y_position_percent": {
          "type": "integer",
          "description": "The y position of the command palette as a percentage of the monitor height",
          "default": 20
        },
        "backdrop": {
          "$ref": "#/$defs/WindowBackdropConfig",
          "description": "The backdrop to use for the command palette"
        }
      }
    },

    "FocusIndicatorPlugin": {
      "type": "object",
      "description": "Plugin to add a focus indicator. For more, see https://https://dalyisaac.github.io/Whim/configure/plugins/command-palette.html",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether the plugin is enabled",
          "default": true
        },
        "color": {
          "$ref": "#/$defs/Color",
          "description": "The color of the focus indicator",
          "default": "red"
        },
        "border_size": {
          "type": "integer",
          "description": "The size of the border of the focus indicator, in pixels",
          "default": 4
        },
        "is_fade_enabled": {
          "type": "boolean",
          "description": "When `true`, the focus indicator will be visile for `fade_timeout` seconds after the window is focused",
          "default": false
        },
        "fade_timeout": {
          "type": "integer",
          "description": "The time in seconds before the focus indicator fades out",
          "default": 10
        }
      }
    },

    "LayoutPreviewPlugin": {
      "type": "object",
      "description": "Plugin to add a layout preview. For more, see https://dalyisaac.github.io/Whim/configure/plugins/layout-preview.html",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether the plugin is enabled",
          "default": true
        }
      }
    },

    "UpdaterPlugin": {
      "type": "object",
      "description": "Plugin to add an updater. For more, see https://dalyisaac.github.io/Whim/configure/plugins/updater.html",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether the plugin is enabled",
          "default": true
        },
        "release_channel": {
          "anyOf": [
            {
              "const": "alpha",
              "description": "Alpha releases are the most unstable, but have the latest features"
            },
            {
              "const": "beta",
              "description": "NOT YET AVAILABLE. Beta releases are more stable than alpha releases, but less stable than stable releases"
            },
            {
              "const": "stable",
              "description": "NOT YET AVAILABLE. Stable releases are the most stable, but have the least features"
            }
          ],
          "default": "alpha"
        },
        "update_frequency": {
          "anyOf": [
            {
              "const": "never",
              "description": "Never check for updates"
            },
            {
              "const": "daily",
              "description": "Check for updates daily"
            },
            {
              "const": "weekly",
              "description": "Check for updates weekly"
            },
            {
              "const": "monthly",
              "description": "Check for updates monthly"
            }
          ],
          "default": "weekly"
        }
      }
    },

    "SliceLayoutPlugin": {
      "type": "object",
      "description": "Plugin to add a slice layout. For more, see https://dalyisaac.github.io/Whim/configure/plugins/slice-layout.html",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether the plugin is enabled. If a SliceLayoutEngine is enabled, this plugin will be enabled",
          "default": true
        }
      }
    },

    "TreeLayoutPlugin": {
      "type": "object",
      "description": "Plugin to add a tree layout. For more, see https://dalyisaac.github.io/Whim/configure/plugins/tree-layout.html",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether the plugin is enabled. If a TreeLayoutEngine is enabled, this plugin will be enabled",
          "default": true
        }
      }
    },

    "Color": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$",
          "description": "A RGB or RGBA color in hex format, e.g. `#FF0000FF`, `#FF00FF` or `#F0F`"
        },
        {
          "const": "alice_blue",
          "description": "Color with ARGB value of #FFF0F8FF."
        },
        {
          "const": "antique_white",
          "description": "Color with ARGB value of #FFFAEBD7."
        },
        {
          "const": "aqua",
          "description": "Color with ARGB value of #FF00FFFF."
        },
        {
          "const": "aquamarine",
          "description": "Color with ARGB value of #FF7FFFD4."
        },
        {
          "const": "azure",
          "description": "Color with ARGB value of #FFF0FFFF."
        },
        {
          "const": "beige",
          "description": "Color with ARGB value of #FFF5F5DC."
        },
        {
          "const": "bisque",
          "description": "Color with ARGB value of #FFFFE4C4."
        },
        {
          "const": "black",
          "description": "Color with ARGB value of #FF000000."
        },
        {
          "const": "blanched_almond",
          "description": "Color with ARGB value of #FFFFEBCD."
        },
        {
          "const": "blue",
          "description": "Color with ARGB value of #FF0000FF."
        },
        {
          "const": "blue_violet",
          "description": "Color with ARGB value of #FF8A2BE2."
        },
        {
          "const": "brown",
          "description": "Color with ARGB value of #FFA52A2A."
        },
        {
          "const": "burly_wood",
          "description": "Color with ARGB value of #FFDEB887."
        },
        {
          "const": "cadet_blue",
          "description": "Color with ARGB value of #FF5F9EA0."
        },
        {
          "const": "chartreuse",
          "description": "Color with ARGB value of #FF7FFF00."
        },
        {
          "const": "chocolate",
          "description": "Color with ARGB value of #FFD2691E."
        },
        {
          "const": "coral",
          "description": "Color with ARGB value of #FFFF7F50."
        },
        {
          "const": "cornflower_blue",
          "description": "Color with ARGB value of #FF6495ED."
        },
        {
          "const": "cornsilk",
          "description": "Color with ARGB value of #FFFFF8DC."
        },
        {
          "const": "crimson",
          "description": "Color with ARGB value of #FFDC143C."
        },
        {
          "const": "cyan",
          "description": "Color with ARGB value of #FF00FFFF."
        },
        {
          "const": "dark_blue",
          "description": "Color with ARGB value of #FF00008B."
        },
        {
          "const": "dark_cyan",
          "description": "Color with ARGB value of #FF008B8B."
        },
        {
          "const": "dark_goldenrod",
          "description": "Color with ARGB value of #FFB8860B."
        },
        {
          "const": "dark_gray",
          "description": "Color with ARGB value of #FFA9A9A9."
        },
        {
          "const": "dark_green",
          "description": "Color with ARGB value of #FF006400."
        },
        {
          "const": "dark_khaki",
          "description": "Color with ARGB value of #FFBDB76B."
        },
        {
          "const": "dark_magenta",
          "description": "Color with ARGB value of #FF8B008B."
        },
        {
          "const": "dark_olive_green",
          "description": "Color with ARGB value of #FF556B2F."
        },
        {
          "const": "dark_orange",
          "description": "Color with ARGB value of #FFFF8C00."
        },
        {
          "const": "dark_orchid",
          "description": "Color with ARGB value of #FF9932CC."
        },
        {
          "const": "dark_red",
          "description": "Color with ARGB value of #FF8B0000."
        },
        {
          "const": "dark_salmon",
          "description": "Color with ARGB value of #FFE9967A."
        },
        {
          "const": "dark_sea_green",
          "description": "Color with ARGB value of #FF8FBC8F."
        },
        {
          "const": "dark_slate_blue",
          "description": "Color with ARGB value of #FF483D8B."
        },
        {
          "const": "dark_slate_gray",
          "description": "Color with ARGB value of #FF2F4F4F."
        },
        {
          "const": "dark_turquoise",
          "description": "Color with ARGB value of #FF00CED1."
        },
        {
          "const": "dark_violet",
          "description": "Color with ARGB value of #FF9400D3."
        },
        {
          "const": "deep_pink",
          "description": "Color with ARGB value of #FFFF1493."
        },
        {
          "const": "deep_sky_blue",
          "description": "Color with ARGB value of #FF00BFFF."
        },
        {
          "const": "dim_gray",
          "description": "Color with ARGB value of #FF696969."
        },
        {
          "const": "dodger_blue",
          "description": "Color with ARGB value of #FF1E90FF."
        },
        {
          "const": "firebrick",
          "description": "Color with ARGB value of #FFB22222."
        },
        {
          "const": "floral_white",
          "description": "Color with ARGB value of #FFFFFAF0."
        },
        {
          "const": "forest_green",
          "description": "Color with ARGB value of #FF228B22."
        },
        {
          "const": "fuchsia",
          "description": "Color with ARGB value of #FFFF00FF."
        },
        {
          "const": "gainsboro",
          "description": "Color with ARGB value of #FFDCDCDC."
        },
        {
          "const": "ghost_white",
          "description": "Color with ARGB value of #FFF8F8FF."
        },
        {
          "const": "gold",
          "description": "Color with ARGB value of #FFFFD700."
        },
        {
          "const": "goldenrod",
          "description": "Color with ARGB value of #FFDAA520."
        },
        {
          "const": "gray",
          "description": "Color with ARGB value of #FF808080."
        },
        {
          "const": "green",
          "description": "Color with ARGB value of #FF008000."
        },
        {
          "const": "green_yellow",
          "description": "Color with ARGB value of #FFADFF2F."
        },
        {
          "const": "honeydew",
          "description": "Color with ARGB value of #FFF0FFF0."
        },
        {
          "const": "hot_pink",
          "description": "Color with ARGB value of #FFFF69B4."
        },
        {
          "const": "indian_red",
          "description": "Color with ARGB value of #FFCD5C5C."
        },
        {
          "const": "indigo",
          "description": "Color with ARGB value of #FF4B0082."
        },
        {
          "const": "ivory",
          "description": "Color with ARGB value of #FFFFFFF0."
        },
        {
          "const": "khaki",
          "description": "Color with ARGB value of #FFF0E68C."
        },
        {
          "const": "lavender",
          "description": "Color with ARGB value of #FFE6E6FA."
        },
        {
          "const": "lavender_blush",
          "description": "Color with ARGB value of #FFFFF0F5."
        },
        {
          "const": "lawn_green",
          "description": "Color with ARGB value of #FF7CFC00."
        },
        {
          "const": "lemon_chiffon",
          "description": "Color with ARGB value of #FFFFFACD."
        },
        {
          "const": "light_blue",
          "description": "Color with ARGB value of #FFADD8E6."
        },
        {
          "const": "light_coral",
          "description": "Color with ARGB value of #FFF08080."
        },
        {
          "const": "light_cyan",
          "description": "Color with ARGB value of #FFE0FFFF."
        },
        {
          "const": "light_goldenrod_yellow",
          "description": "Color with ARGB value of #FFFAFAD2."
        },
        {
          "const": "light_gray",
          "description": "Color with ARGB value of #FFD3D3D3."
        },
        {
          "const": "light_green",
          "description": "Color with ARGB value of #FF90EE90."
        },
        {
          "const": "light_pink",
          "description": "Color with ARGB value of #FFFFB6C1."
        },
        {
          "const": "light_salmon",
          "description": "Color with ARGB value of #FFFFA07A."
        },
        {
          "const": "light_sea_green",
          "description": "Color with ARGB value of #FF20B2AA."
        },
        {
          "const": "light_sky_blue",
          "description": "Color with ARGB value of #FF87CEFA."
        },
        {
          "const": "light_slate_gray",
          "description": "Color with ARGB value of #FF778899."
        },
        {
          "const": "light_steel_blue",
          "description": "Color with ARGB value of #FFB0C4DE."
        },
        {
          "const": "light_yellow",
          "description": "Color with ARGB value of #FFFFFFE0."
        },
        {
          "const": "lime",
          "description": "Color with ARGB value of #FF00FF00."
        },
        {
          "const": "lime_green",
          "description": "Color with ARGB value of #FF32CD32."
        },
        {
          "const": "linen",
          "description": "Color with ARGB value of #FFFAF0E6."
        },
        {
          "const": "magenta",
          "description": "Color with ARGB value of #FFFF00FF."
        },
        {
          "const": "maroon",
          "description": "Color with ARGB value of #FF800000."
        },
        {
          "const": "medium_aquamarine",
          "description": "Color with ARGB value of #FF66CDAA."
        },
        {
          "const": "medium_blue",
          "description": "Color with ARGB value of #FF0000CD."
        },
        {
          "const": "medium_orchid",
          "description": "Color with ARGB value of #FFBA55D3."
        },
        {
          "const": "medium_purple",
          "description": "Color with ARGB value of #FF9370DB."
        },
        {
          "const": "medium_sea_green",
          "description": "Color with ARGB value of #FF3CB371."
        },
        {
          "const": "medium_slate_blue",
          "description": "Color with ARGB value of #FF7B68EE."
        },
        {
          "const": "medium_spring_green",
          "description": "Color with ARGB value of #FF00FA9A."
        },
        {
          "const": "medium_turquoise",
          "description": "Color with ARGB value of #FF48D1CC."
        },
        {
          "const": "medium_violet_red",
          "description": "Color with ARGB value of #FFC71585."
        },
        {
          "const": "midnight_blue",
          "description": "Color with ARGB value of #FF191970."
        },
        {
          "const": "mint_cream",
          "description": "Color with ARGB value of #FFF5FFFA."
        },
        {
          "const": "misty_rose",
          "description": "Color with ARGB value of #FFFFE4E1."
        },
        {
          "const": "moccasin",
          "description": "Color with ARGB value of #FFFFE4B5."
        },
        {
          "const": "navajo_white",
          "description": "Color with ARGB value of #FFFFDEAD."
        },
        {
          "const": "navy",
          "description": "Color with ARGB value of #FF000080."
        },
        {
          "const": "old_lace",
          "description": "Color with ARGB value of #FFFDF5E6."
        },
        {
          "const": "olive",
          "description": "Color with ARGB value of #FF808000."
        },
        {
          "const": "olive_drab",
          "description": "Color with ARGB value of #FF6B8E23."
        },
        {
          "const": "orange",
          "description": "Color with ARGB value of #FFFFA500."
        },
        {
          "const": "orange_red",
          "description": "Color with ARGB value of #FFFF4500."
        },
        {
          "const": "orchid",
          "description": "Color with ARGB value of #FFDA70D6."
        },
        {
          "const": "pale_goldenrod",
          "description": "Color with ARGB value of #FFEEE8AA."
        },
        {
          "const": "pale_green",
          "description": "Color with ARGB value of #FF98FB98."
        },
        {
          "const": "pale_turquoise",
          "description": "Color with ARGB value of #FFAFEEEE."
        },
        {
          "const": "pale_violet_red",
          "description": "Color with ARGB value of #FFDB7093."
        },
        {
          "const": "papaya_whip",
          "description": "Color with ARGB value of #FFFFEFD5."
        },
        {
          "const": "peach_puff",
          "description": "Color with ARGB value of #FFFFDAB9."
        },
        {
          "const": "peru",
          "description": "Color with ARGB value of #FFCD853F."
        },
        {
          "const": "pink",
          "description": "Color with ARGB value of #FFFFC0CB."
        },
        {
          "const": "plum",
          "description": "Color with ARGB value of #FFDDA0DD."
        },
        {
          "const": "powder_blue",
          "description": "Color with ARGB value of #FFB0E0E6."
        },
        {
          "const": "purple",
          "description": "Color with ARGB value of #FF800080."
        },
        {
          "const": "red",
          "description": "Color with ARGB value of #FFFF0000."
        },
        {
          "const": "rosy_brown",
          "description": "Color with ARGB value of #FFBC8F8F."
        },
        {
          "const": "royal_blue",
          "description": "Color with ARGB value of #FF4169E1."
        },
        {
          "const": "saddle_brown",
          "description": "Color with ARGB value of #FF8B4513."
        },
        {
          "const": "salmon",
          "description": "Color with ARGB value of #FFFA8072."
        },
        {
          "const": "sandy_brown",
          "description": "Color with ARGB value of #FFF4A460."
        },
        {
          "const": "sea_green",
          "description": "Color with ARGB value of #FF2E8B57."
        },
        {
          "const": "sea_shell",
          "description": "Color with ARGB value of #FFFFF5EE."
        },
        {
          "const": "sienna",
          "description": "Color with ARGB value of #FFA0522D."
        },
        {
          "const": "silver",
          "description": "Color with ARGB value of #FFC0C0C0."
        },
        {
          "const": "sky_blue",
          "description": "Color with ARGB value of #FF87CEEB."
        },
        {
          "const": "slate_blue",
          "description": "Color with ARGB value of #FF6A5ACD."
        },
        {
          "const": "slate_gray",
          "description": "Color with ARGB value of #FF708090."
        },
        {
          "const": "snow",
          "description": "Color with ARGB value of #FFFFFAFA."
        },
        {
          "const": "spring_green",
          "description": "Color with ARGB value of #FF00FF7F."
        },
        {
          "const": "steel_blue",
          "description": "Color with ARGB value of #FF4682B4."
        },
        {
          "const": "tan",
          "description": "Color with ARGB value of #FFD2B48C."
        },
        {
          "const": "teal",
          "description": "Color with ARGB value of #FF008080."
        },
        {
          "const": "thistle",
          "description": "Color with ARGB value of #FFD8BFD8."
        },
        {
          "const": "tomato",
          "description": "Color with ARGB value of #FFFF6347."
        },
        {
          "const": "transparent",
          "description": "Color with ARGB value of #00FFFFFF."
        },
        {
          "const": "turquoise",
          "description": "Color with ARGB value of #FF40E0D0."
        },
        {
          "const": "violet",
          "description": "Color with ARGB value of #FFEE82EE."
        },
        {
          "const": "wheat",
          "description": "Color with ARGB value of #FFF5DEB3."
        },
        {
          "const": "white",
          "description": "Color with ARGB value of #FFFFFFFF."
        },
        {
          "const": "white_smoke",
          "description": "Color with ARGB value of #FFF5F5F5."
        },
        {
          "const": "yellow",
          "description": "Color with ARGB value of #FFFFFF00."
        },
        {
          "const": "yellow_green",
          "description": "Color with ARGB value of #FF9ACD32."
        }
      ]
    },

    "FloatingWindowPlugin": {
      "type": "object",
      "description": "Plugin to add a floating window. For more, see https://dalyisaac.github.io/Whim/configure/plugins/floating-window.html",
      "additionalProperties": false,
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether the plugin is enabled",
          "default": true
        }
      }
    }
  }
}
