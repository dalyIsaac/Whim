/* This file was generated from data with the following license:
 *
 * MIT License
 *
 * Copyright (c) 2021 Jade Iqbal
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Whim;

/// <summary>
/// This file is automatically generated by generate_app_rules.py. Do not edit it manually.
/// </summary>
internal static class DefaultFilteredWindowsKomorebi
{
	/// <summary>
	/// Load the windows ignored by Komorebi <see href="https://github.com/LGUG2Z/komorebi-application-specific-configuration"/>.
	/// </summary>
	/// <param name="filterManager"></param>
	public static void LoadWindowsIgnoredByKomorebi(IFilterManager filterManager)
	{
		// 1Password
		filterManager.AddProcessFileNameFilter("Guitar Rig 7.exe");

		// 1Password
		filterManager.AddProcessFileNameFilter("1Password.exe");

		// Ableton Live
		filterManager.Add((window) => window.WindowClass.StartsWith("AbletonVstPlugClass") || window.WindowClass.EndsWith("AbletonVstPlugClass"));  // Targets VST2 windows
		filterManager.Add((window) => window.WindowClass.StartsWith("Vst3PlugWindow") || window.WindowClass.EndsWith("Vst3PlugWindow"));  // Targets VST3 windows

		// Adobe Premiere Pro
		filterManager.AddWindowClassFilter("DroverLord - Window Class");  // Premiere Pro effects popups

		// Affinity Photo 2
		filterManager.AddProcessFileNameFilter("Photo.exe");

		// AutoHotkey
		filterManager.Add((window) => window.Title.StartsWith("Window Spy"));  // Uses `StartsWith` to also match `* for AHKv2`
		filterManager.AddProcessFileNameFilter("AutoHotkeyUX.exe");

		// Bloxstrap
		filterManager.AddProcessFileNameFilter("Bloxstrap.exe");

		// CLion
		filterManager.AddWindowClassFilter("SunAwtDialog");  // Targets JetBrains IDE popups and floating windows

		// Calculator
		filterManager.AddTitleFilter("Calculator");

		// Citrix Receiver
		filterManager.AddProcessFileNameFilter("SelfService.exe");

		// Credential Manager UI Host
		filterManager.AddProcessFileNameFilter("CredentialUIBroker.exe");  // Targets the Windows popup prompting you for a PIN instead of a password on 1Password etc.

		// Delphi applications
		filterManager.Add((window) => window.WindowClass.StartsWith("TApplication") || window.WindowClass.EndsWith("TApplication"));  // Target hidden window spawned by Delphi applications
		filterManager.Add((window) => window.WindowClass.StartsWith("TWizardForm") || window.WindowClass.EndsWith("TWizardForm"));  // Target Inno Setup installers

		// Dropbox
		filterManager.AddProcessFileNameFilter("Dropbox.exe");

		// Elephicon
		filterManager.AddProcessFileNameFilter("Elephicon.exe");

		// Elgato Camera Hub
		filterManager.AddProcessFileNameFilter("Camera Hub.exe");

		// Elgato Control Center
		filterManager.AddProcessFileNameFilter("ControlCenter.exe");

		// Elgato Wave Link
		filterManager.AddProcessFileNameFilter("WaveLink.exe");

		// GOG Galaxy
		filterManager.Add((window) => window.WindowClass.StartsWith("Chrome_RenderWidgetHostHWND") || window.WindowClass.EndsWith("Chrome_RenderWidgetHostHWND"));  // Targets a hidden window spawned by GOG Galaxy

		// GitHub Credential Manager
		filterManager.AddProcessFileNameFilter("git-credential-manager.exe");

		// Google Drive
		filterManager.AddProcessFileNameFilter("GoogleDriveFS.exe");

		// IntelliJ IDEA
		// filterManager.AddWindowClassFilter("SunAwtDialog");  // duplicate rule

		// Keyviz
		filterManager.AddProcessFileNameFilter("keyviz.exe");

		// Logi Bolt
		filterManager.AddProcessFileNameFilter("LogiBolt.exe");

		// LogiTune
		filterManager.AddProcessFileNameFilter("LogiTune.exe");

		// Logitech Options
		filterManager.AddProcessFileNameFilter("LogiOptionsUI.exe");

		// Microsoft Active Accessibility
		filterManager.Add((window) => window.WindowClass.StartsWith("#32770") || window.WindowClass.EndsWith("#32770"));  // Dialog Box

		// Microsoft Excel
		filterManager.Add((window) => window.WindowClass.StartsWith("_WwB") || window.WindowClass.EndsWith("_WwB"));  // Targets a hidden window spawned by Microsoft Office applications

		// Microsoft Outlook
		// filterManager.Add((window) => window.WindowClass.StartsWith("_WwB") || window.WindowClass.EndsWith("_WwB"));  // duplicate rule

		// Microsoft PC Manager
		filterManager.AddProcessFileNameFilter("MSPCManager.exe");

		// Microsoft PowerPoint
		// filterManager.Add((window) => window.WindowClass.StartsWith("_WwB") || window.WindowClass.EndsWith("_WwB"));  // duplicate rule

		// Microsoft Teams classic
		filterManager.Add((window) => window.Title.StartsWith("Microsoft Teams Notification") || window.Title.EndsWith("Microsoft Teams Notification"));  // Target Teams pop-up notification windows
		filterManager.Add((window) => window.Title.StartsWith("Microsoft Teams Call") || window.Title.EndsWith("Microsoft Teams Call"));  // Target Teams call in progress windows

		// Microsoft Word
		// filterManager.Add((window) => window.WindowClass.StartsWith("_WwB") || window.WindowClass.EndsWith("_WwB"));  // duplicate rule

		// Mozilla Firefox
		filterManager.Add((window) => window.WindowClass.StartsWith("MozillaTaskbarPreviewClass") || window.WindowClass.EndsWith("MozillaTaskbarPreviewClass"));  // Targets invisible windows spawned by Firefox to show tab previews in the taskbar

		// NohBoard
		filterManager.AddProcessFileNameFilter("NohBoard.exe");

		// OneDrive
		filterManager.Add((window) => window.WindowClass.StartsWith("OneDriveReactNativeWin32WindowClass") || window.WindowClass.EndsWith("OneDriveReactNativeWin32WindowClass"));

		// Paradox Launcher
		filterManager.AddProcessFileNameFilter("Paradox Launcher.exe");

		// Playnite
		filterManager.AddProcessFileNameFilter("Playnite.FullscreenApp.exe");  // Target fullscreen app

		// PowerToys
		filterManager.AddProcessFileNameFilter("PowerToys.ColorPickerUI.exe");  // Target color picker dialog
		filterManager.AddProcessFileNameFilter("PowerToys.CropAndLock.exe");  // Target thumbnail/cropped window
		filterManager.AddProcessFileNameFilter("PowerToys.ImageResizer.exe");  // Target image resizer dialog
		filterManager.AddProcessFileNameFilter("PowerToys.Peek.UI.exe");  // Target Peek popup
		filterManager.AddProcessFileNameFilter("PowerToys.PowerLauncher.exe");  // PpowerLauncher popup
		filterManager.AddProcessFileNameFilter("PowerToys.PowerAccent.exe");  // PowerAccent popup

		// Process Hacker
		filterManager.AddProcessFileNameFilter("ProcessHacker.exe");

		// PyCharm
		// filterManager.AddWindowClassFilter("SunAwtDialog");  // duplicate rule

		// QQ
		filterManager.Add((window) => window.Title.StartsWith("图片查看器") || window.Title.EndsWith("图片查看器"));
		filterManager.Add((window) => window.Title.StartsWith("群聊的聊天记录") || window.Title.EndsWith("群聊的聊天记录"));
		filterManager.Add((window) => window.Title.StartsWith("语音通话") || window.Title.EndsWith("语音通话"));

		// QuickLook
		filterManager.AddProcessFileNameFilter("QuickLook.exe");

		// RepoZ
		filterManager.AddProcessFileNameFilter("RepoZ.exe");

		// Rider
		// filterManager.AddWindowClassFilter("SunAwtDialog");  // duplicate rule
		filterManager.Add((window) => window.Title.StartsWith("PopupMessageWindow") || window.Title.EndsWith("PopupMessageWindow"));  // Targets JetBrains IDE popups

		// RoundedTB
		filterManager.AddProcessFileNameFilter("RoundedTB.exe");

		// RustRover
		// filterManager.AddWindowClassFilter("SunAwtDialog");  // duplicate rule

		// Sideloadly
		filterManager.AddProcessFileNameFilter("sideloadly.exe");

		// Slack
		// filterManager.Add((window) => window.WindowClass.StartsWith("Chrome_RenderWidgetHostHWND") || window.WindowClass.EndsWith("Chrome_RenderWidgetHostHWND"));  // duplicate rule

		// Slack
		// filterManager.Add((window) => window.WindowClass.StartsWith("Chrome_RenderWidgetHostHWND") || window.WindowClass.EndsWith("Chrome_RenderWidgetHostHWND"));  // duplicate rule

		// Smart Install Maker
		filterManager.Add((window) => window.WindowClass.StartsWith("obj_App") || window.WindowClass.EndsWith("obj_App"));  // Target hidden window spawned by installer
		filterManager.Add((window) => window.WindowClass.StartsWith("obj_Form") || window.WindowClass.EndsWith("obj_Form"));  // Target installer

		// SnippingTool
		filterManager.AddProcessFileNameFilter("SnippingTool.exe");

		// Steam Beta
		filterManager.Add((window) => window.Title.StartsWith("notificationtoasts_") || window.Title.EndsWith("notificationtoasts_"));  // Target notification toast popups

		// System Informer
		filterManager.AddProcessFileNameFilter("SystemInformer.exe");

		// SystemSettings
		filterManager.Add((window) => window.WindowClass.StartsWith("Shell_Dialog") || window.WindowClass.EndsWith("Shell_Dialog"));

		// Task Manager
		filterManager.Add((window) => window.WindowClass.StartsWith("TaskManagerWindow") || window.WindowClass.EndsWith("TaskManagerWindow"));

		// Total Commander
		filterManager.AddWindowClassFilter("TDLG2FILEACTIONMIN");  // Target standard copy window

		// TouchCursor
		filterManager.AddProcessFileNameFilter("tcconfig.exe");

		// TranslucentTB
		filterManager.AddProcessFileNameFilter("TranslucentTB.exe");

		// WebStorm
		// filterManager.AddWindowClassFilter("SunAwtDialog");  // duplicate rule

		// WinZip (32-bit)
		filterManager.AddProcessFileNameFilter("winzip32.exe");

		// WinZip (64-bit)
		filterManager.AddProcessFileNameFilter("winzip64.exe");

		// Windows Explorer
		filterManager.Add((window) => window.WindowClass.StartsWith("OperationStatusWindow") || window.WindowClass.EndsWith("OperationStatusWindow"));  // Targets copy/move operation windows
		filterManager.Add((window) => window.Title.StartsWith("Control Panel") || window.Title.EndsWith("Control Panel"));

		// Windows Installer
		filterManager.AddProcessFileNameFilter("msiexec.exe");

		// Windows Subsystem for Android
		filterManager.Add((window) => window.WindowClass.StartsWith("android(splash)") || window.WindowClass.EndsWith("android(splash)"));  // Targets splash/startup screen

		// Wox
		filterManager.Add((window) => window.Title.StartsWith("Hotkey sink") || window.Title.EndsWith("Hotkey sink"));  // Targets a hidden window spawned by Wox

		// Zoom
		filterManager.AddProcessFileNameFilter("Zoom.exe");

		// paint.net
		filterManager.AddProcessFileNameFilter("paintdotnet.exe");

		// pinentry
		filterManager.AddProcessFileNameFilter("pinentry.exe");

		// ueli
		filterManager.AddProcessFileNameFilter("ueli.exe");
	}
}
